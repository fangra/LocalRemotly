name: "sfdx"

on: push
#  pull_request:
  # branches:
   # - master


jobs:
  build:
    environment: WF_ENV  # the enviroment variable, with the secrets. 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set Node.js 12.x
        uses: actions/setup-node@v1
        with:
          node-version: 12.x

      - name: Install dependencies
        run: npm ci

      - name: Rebuild the index.js file
        run: npm run build

      - name: Compare the expected and actual dist/ directories
        run: |
          if [ "$(git diff --ignore-space-at-eol dist/ | wc -l)" -gt "0" ]; then
            echo "Detected uncommitted changes after build.  See status below:"
            git diff
            exit 1
          fi
      # If dist/ was different than expected, upload the expected version as an artifact
      - uses: actions/upload-artifact@v2
        if: ${{ failure() && steps.diff.conclusion == 'failure' }}
        with:
          name: dist
          path: dist/
          
      - uses: sfdx-actions/setup-pmd@v1
      - name: 'generate commite package'
        run: |
         npm install --save -g sfdc-git-package
      # Review Source code use --failOnViolation false to bypass the fail
      - name: 'Review Source Code'
        run: |
         pmd -d "./force-app/main/default/classes" -R "rulesets/apex/quickstart.xml" -f text -failOnViolation false
      # Salesforce CLI Installation.
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1 
          ./sfdx-cli/install
      - name : 'test sgp -v'
        run : |
          sgp -h
          git diff master | force push -f 
       #  git diff DevHub --name-only --diff-filter=ACM | force push -f 
        #  git diff GHS master -- ./force-app echo 'y' | sfdx plugins:install sfdx-git-delta  echo 'y' | sfdx sgp:source:delta
        #  git rev-list --max-parents=0 HEAD
        #  git rev-list ed715092ab8f2856a2a82b1ae80083613294be83
         # sgp --from "ed715092ab8f2856a2a82b1ae80083613294be83" --output ./data
       # Runs a set of commands using the runners shell

      - name: 'Decrypt server file'
        env:
         DECRYPTION_KEY: ${{ secrets.DECRYPTION_KEY }}
         DECRYPTION_IV: ${{ secrets.DECRYPTION_IV }}
        run: |
         echo "DECRYPTION_KEY "
         echo ${{ secrets.DECRYPTION_KEY }}
         openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
      - name: 'Authorise dev Hub'
        run: 'sfdx force:auth:jwt:grant --clientid=$CONSUMER_KEY  --username=$USERNAME --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org'
        env:
         CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
         USERNAME: ${{ secrets.USERNAME }}
      - name: Create scratch org
        run: "sfdx force:org:create  --setdefaultusername -f config/project-scratch-def.json -a my-scratch --setalias soenv"
      - name: Password generation !
        run: "sfdx force:user:password:generate --targetusername soenv"
        # push source into scratch org
      - name: Push source
        run: "sfdx force:source:push -u soenv"
      - name: 'List orgs'
        run: "sfdx force:org:list"
        # run tests 
      - name: 'Run tests'
        run: "sfdx force:apex:test:run -u soenv  --resultformat human" 
      - name: 'Get scratch Org URL'
        id: out-cache
        run: echo ::set-output name=orgCreateResult::$(sfdx force:org:display --json -u soenv)
        # get URL and params of scratch org
      - name: 'Get Scratch URL'
        id: params
        run: |
          echo $GITHUB_BASE_REF
          echo $GITHUB_HEAD_REF
          echo ::set-output name=instanceURL::$(echo $orgCreateResult | jq -r .result.instanceUrl)
          echo ::set-output name=accessToken::$(echo $orgCreateResult | jq -r .result.accessToken)
          echo ::set-output name=parameters::'/secur/frontdoor.jsp?sid='
        env:
          orgCreateResult: ${{ steps.out-cache.outputs.orgCreateResult}}
        # Comment Pull
      - name: 'Comment on pull request'
        uses: unsplash/comment-on-pr@master
        with:
          msg: ${{steps.params.outputs.instanceURL}}${{steps.params.outputs.parameters}}${{steps.params.outputs.accessToken}}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Merge the from_branch to the target branch
      - name: 'Run Merge'
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: $GITHUB_HEAD_REF
          target_branch: $GITHUB_BASE_REF
          github_token: ${{ github.token }}
       # Convert into metadata 
      - name: 'Convert Metadata'
        run: "sfdx force:source:convert --manifest=package/package.xml --outputdir=convert"
      # Run a check only test pre deployment -x for Package.xml
      - name: 'Run Test on Metadata'
        run: sfdx force:mdapi:deploy --wait 62 --deploydir=convert --testlevel=RunLocalTests --checkonly -u hub-org 
      # Run deployment
      - name: 'Run deploy success'
        run: "sfdx force:mdapi:deploy --wait 62 --deploydir=convert --testlevel=RunLocalTests -u hub-org"
      # Run deployment report
      - name: 'Run Deployement Report success'
        run: "sfdx force:mdapi:deploy:report -u  hub-org --verbose"
      # Delete scratch org
      - name: 'Delete the scratch org'
        run: "sfdx force:org:delete -p -u soenv"
