name: "sfdx"

on: 
  pull_request:
   branches:
   - master

jobs:
  build:
    environment: WF_ENV  # the enviroment variable, with the secrets. 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: 'Install Salesforce CLI'
        run: |
          wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
          mkdir sfdx-cli
          tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1 
          ./sfdx-cli/install
       # Runs a set of commands using the runners shell
      - name: 'Decrypt server file'
        env:
         DECRYPTION_KEY: ${{ secrets.DECRYPTION_KEY }}
         DECRYPTION_IV: ${{ secrets.DECRYPTION_IV }}
        run: |
 
         echo "DECRYPTION_KEY "
         echo ${{ secrets.DECRYPTION_KEY }}
         openssl enc -nosalt -aes-256-cbc -d -in assets/server.key.enc -out server.key -base64 -K $DECRYPTION_KEY -iv $DECRYPTION_IV
      - name: 'Authorise dev Hub'
        run: 'sfdx force:auth:jwt:grant --clientid=$CONSUMER_KEY  --username=$USERNAME --jwtkeyfile server.key --setdefaultdevhubusername --setalias=hub-org'
        env:
         CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
         USERNAME: ${{ secrets.USERNAME }}
    #  - name: Create scratch org
    #    run: "sfdx force:org:create  --setdefaultusername -f config/project-scratch-def.json -a my-scratch --setalias soenv"
    #  - name: Password generation !
    #    run: "sfdx force:user:password:generate --targetusername soenv"
        # push source into scratch org
   #   - name: Push source
   #     run: "sfdx force:source:push -u hub-org"
      - name: 'List orgs'
        run: "sfdx force:org:list"
        #PMD Analysis
      - name: Run PMD Analysis on Files Changed
        id: pmd-partial-analysis
        if: github.event.pull_request != null
        uses: synergy-au/pmd-analyser-action@v2.1
        with:
          pmd-version: 'latest'
          file-path: './force-app/main/default'
          rules-path: './ruleset.xml'
          error-rules: 'AvoidDirectAccessTriggerMap,AvoidDmlStatementsInLoops,AvoidHardcodingId'
          note-rules: 'ApexDoc'
      - name: Upload results to GitHub
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: pmd-output.sarif
      - name: No PMD Errors?
        run: |
          if ${{ steps.pmd-full-analysis.outputs.error-found }} ${{ steps.pmd-partial-analysis.outputs.error-found }}
          then
            exit 3
          fi
        # run tests 
      - name: 'Run tests'
        run: "sfdx force:apex:test:run -u soenv  --resultformat human" 
      - name: 'Get scratch Org URL'
        id: out-cache
        run: echo ::set-output name=orgCreateResult::$(sfdx force:org:display --json -u soenv)
        # get URL and params of scratch org
      - name: 'Get Scratch URL'
        id: params
        run: |
          echo $GITHUB_BASE_REF
          echo $GITHUB_HEAD_REF
          echo ::set-output name=instanceURL::$(echo $orgCreateResult | jq -r .result.instanceUrl)
          echo ::set-output name=accessToken::$(echo $orgCreateResult | jq -r .result.accessToken)
          echo ::set-output name=parameters::'/secur/frontdoor.jsp?sid='
        env:
          orgCreateResult: ${{ steps.out-cache.outputs.orgCreateResult}}
        # Comment Pull
      - name: 'Comment on pull request'
        uses: unsplash/comment-on-pr@master
        with:
          msg: ${{steps.params.outputs.instanceURL}}${{steps.params.outputs.parameters}}${{steps.params.outputs.accessToken}}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        # Merge the from_branch to the target branch
      - name: 'Run Merge'
        uses: devmasx/merge-branch@master
        with:
          type: now
          from_branch: Integration
          target_branch: master
          github_token: ${{ github.token }}
       # Convert into metadata 
      - name: 'Convert Metadata'
        run: "sfdx force:source:convert --rootdir=force-app --outputdir=convert"
      # Run a check only test pre deployment
      - name: 'Run Test on Metadata'
        run: sfdx force:mdapi:deploy --wait 62 --deploydir=convert --testlevel=RunLocalTests --checkonly -u hub-org 
      # Run deployment
      - name: 'Run deploy success'
        run: "sfdx force:mdapi:deploy --wait 62 --deploydir=convert --testlevel=RunLocalTests -u hub-org"
      # Run deployment report
      - name: 'Run Deployement Report success'
        run: "sfdx force:mdapi:deploy:report -u  hub-org --verbose"
      # Delete scratch org
      - name: 'Delete the scratch org'
        run: "sfdx force:org:delete -p -u soenv"
